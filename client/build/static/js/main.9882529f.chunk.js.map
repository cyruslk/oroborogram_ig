{"version":3,"sources":["Post.js","App.js","registerServiceWorker.js","index.js"],"names":["Post","props","console","log","postData","caption","thumbnail","comments","likes","timestamp","className","src","pic","name","width","App","useState","query","setQuery","posts","setReceivedPosts","handleSubmit","e","a","preventDefault","fetch","method","headers","body","JSON","stringify","response","json","data","followers","following","bio","renderPosts","lastPosts","map","ele","index","onSubmit","type","value","onChange","target","handleView","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.9882529f.chunk.js","sourcesContent":["import react, {useState} from \"react\";\nimport './App.css';\n\nfunction Post(props){\n\n  console.log(props);\n\n  const {\n    caption,\n    thumbnail,\n    comments,\n    likes,\n    timestamp\n  } = props.postData\n\n  return(\n    <div className=\"iphone-posts\">\n      <header>\n          <img src={props.pic} />\n          <p>{props.name}</p>\n          <i className=\"header-more fas fa-ellipsis-v\" />\n      </header>\n      <main>\n        <img src={thumbnail} />\n      </main>\n      <div className=\"likes\">\n        <div className=\"left-icons\">\n        <img src=\"https://image.flaticon.com/icons/svg/25/25424.svg\" width=\"6%\"/>\n        <img src=\"https://image.flaticon.com/icons/svg/54/54916.svg\" width=\"6%\"/>\n        <img src=\"https://image.flaticon.com/icons/svg/126/126536.svg\" width=\"6%\"/>\n        </div>\n        <img src=\"https://image.flaticon.com/icons/svg/25/25667.svg\" width=\"5%\"/>\n      </div>\n      <section className=\"caption\">\n         {caption}\n      </section>\n    </div>\n  )\n}\n\nexport default Post;\n","import react, {useState} from \"react\";\nimport Post from \"./Post\";\nimport './App.css';\n\nfunction App(){\n\n  const [query, setQuery] = useState(\"\");\n  const [posts, setReceivedPosts] = useState(\"\")\n\n\n    let handleSubmit = async e => {\n      e.preventDefault();\n      const response = await fetch('/api/hashtag', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ posts: query }),\n      });\n      const body = await response.json();\n      setReceivedPosts(body)\n    };\n\n  let handleView = () => {\n    if(!posts.data){\n      return (\n        <section className=\"iphone-container\">\n          <section className=\"form-container\">\n              <form onSubmit={handleSubmit}>\n                <p>Select Hashtag</p>\n                <input\n                  type=\"text\"\n                  value={query}\n                  onChange={e => setQuery(e.target.value)}\n                />\n                <button\n                  type=\"submit\">\n                    Submit\n                  </button>\n              </form>\n          </section>\n        </section>\n      )\n    }else{\n      const {followers, following, bio, name, pic} = posts.data;\n      let renderPosts = posts.data.lastPosts\n      .map((ele, index) => {\n        return (\n          <Post\n            postData={ele}\n            followers={followers}\n            following={following}\n            bio={bio}\n            name={name}\n            pic={pic}\n          />\n        )\n      })\n      return(\n        <section className=\"iphone-container\">\n          {renderPosts}\n        </section>\n      )\n    }\n  }\n\n  return(\n    <div className=\"App\">\n      <main>\n          <div className=\"iphone-x window\">\n          <div className=\"header\">\n            <img src=\"https://image.flaticon.com/icons/svg/25/25315.svg\" width=\"8%\"/>\n            <span className=\"logo\">Oroborogram</span>\n            <img src=\"https://image.flaticon.com/icons/svg/20/20402.svg\" width=\"8%\"/>\n          </div>\n              {handleView()}\n            <div className=\"footer\">\n              <img src=\"https://image.flaticon.com/icons/svg/20/20176.svg\" width=\"8%\"/>\n              <img src=\"https://image.flaticon.com/icons/svg/149/149852.svg\" width=\"8%\"/>\n              <img src=\"https://image.flaticon.com/icons/svg/25/25668.svg\" width=\"8%\"/>\n              <img src=\"https://image.flaticon.com/icons/svg/60/60993.svg\" width=\"8%\"/>\n              <img src=\"https://image.flaticon.com/icons/svg/64/64096.svg\" width=\"8%\"/>\n            </div>\n          </div>\n      </main>\n    </div>\n  )\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}